---
title: Chainstamp REST API
language_tabs:
  - shell: Shell
  - http: HTTP
  - javascript: JavaScript
  - javascript--nodejs: Node.JS
  - ruby: Ruby
  - python: Python
  - java: Java
  - go: Go
toc_footers: []
includes: []
search: true
highlight_theme: darkula
headingLevel: 2

---

<h1 id="chainstamp-rest-api">Chainstamp REST API Version 1.1</h1>

> Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.

This is the API used by chainstamp.io

Base URLs:

* <a href="https://api.chainstamp.io:8443/">https://api.chainstamp.io:8443/</a>

<h1 id="chainstamp-rest-api-verify">Verify</h1>

## get-proof-file

<a id="opIdget-proof-file"></a>

> Code samples

```shell
# You can also use wget
curl -X GET https://api.chainstamp.io:8443/proof/{seedHash} \
  -H 'Accept: */*'

```

```http
GET https://api.chainstamp.io:8443/proof/{seedHash} HTTP/1.1
Host: api.chainstamp.io:8443
Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*'

};

$.ajax({
  url: 'https://api.chainstamp.io:8443/proof/{seedHash}',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const fetch = require('node-fetch');

const headers = {
  'Accept':'*/*'

};

fetch('https://api.chainstamp.io:8443/proof/{seedHash}',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*'
}

result = RestClient.get 'https://api.chainstamp.io:8443/proof/{seedHash}',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*'
}

r = requests.get('https://api.chainstamp.io:8443/proof/{seedHash}', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("https://api.chainstamp.io:8443/proof/{seedHash}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        
    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "https://api.chainstamp.io:8443/proof/{seedHash}", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /proof/{seedHash}`

*Get a proof file using a seed hash*

The proof file is your way to validate a Chainstamp proof independently. This method will return a plain text list of sha256 list of hashes which can be saved as a text file. The hashes in that file correspond to hashes of files submitted to us and hashed together to create a 'seedHash' which is submitted to the bitcoin blockchain in a transaction output.

<h3 id="get-proof-file-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|seedHash|path|string|true|seedHash|

> Example responses

> 200 Response

<h3 id="get-proof-file-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|OK|string|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Unauthorized|None|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|Forbidden|None|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Not Found|None|

<aside class="success">
This operation does not require authentication
</aside>

## verify-item

<a id="opIdverify-item"></a>

> Code samples

```shell
# You can also use wget
curl -X GET https://api.chainstamp.io:8443/verify/item/{itemHash} \
  -H 'Accept: application/json'

```

```http
GET https://api.chainstamp.io:8443/verify/item/{itemHash} HTTP/1.1
Host: api.chainstamp.io:8443
Accept: application/json

```

```javascript
var headers = {
  'Accept':'application/json'

};

$.ajax({
  url: 'https://api.chainstamp.io:8443/verify/item/{itemHash}',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const fetch = require('node-fetch');

const headers = {
  'Accept':'application/json'

};

fetch('https://api.chainstamp.io:8443/verify/item/{itemHash}',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => 'application/json'
}

result = RestClient.get 'https://api.chainstamp.io:8443/verify/item/{itemHash}',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': 'application/json'
}

r = requests.get('https://api.chainstamp.io:8443/verify/item/{itemHash}', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("https://api.chainstamp.io:8443/verify/item/{itemHash}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"application/json"},
        
    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "https://api.chainstamp.io:8443/verify/item/{itemHash}", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /verify/item/{itemHash}`

*Verify status of a file (item)*

Use this endpoint with the hash of a digitial file to check its status. Pass the sha256 hash of any digital file as the {itemHash}.

<h3 id="verify-item-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|itemHash|path|string|true|itemHash|

> Example responses

> 200 Response

```json
{
  "blockHash": "string",
  "blockNumber": 0,
  "blockTime": "2018-12-15T17:50:52Z",
  "confirmations": 0,
  "expectedSubmissionTime": 0,
  "seedHash": "string",
  "status": 0,
  "txId": "string",
  "txTime": "2018-12-15T17:50:52Z"
}
```

<h3 id="verify-item-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|OK|[VerifyItemStatus](#schemaverifyitemstatus)|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Unauthorized|None|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|Forbidden|None|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Not Found|None|

<aside class="success">
This operation does not require authentication
</aside>

## verify-stamp

<a id="opIdverify-stamp"></a>

> Code samples

```shell
# You can also use wget
curl -X GET https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash} \
  -H 'Accept: application/json'

```

```http
GET https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash} HTTP/1.1
Host: api.chainstamp.io:8443
Accept: application/json

```

```javascript
var headers = {
  'Accept':'application/json'

};

$.ajax({
  url: 'https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash}',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const fetch = require('node-fetch');

const headers = {
  'Accept':'application/json'

};

fetch('https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash}',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => 'application/json'
}

result = RestClient.get 'https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash}',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': 'application/json'
}

r = requests.get('https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash}', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"application/json"},
        
    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "https://api.chainstamp.io:8443/verify/stamp/{stampId}/{stampHash}", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /verify/stamp/{stampId}/{stampHash}`

*Verify status*

Verify status using a stampId and a stampHash. Use this method to check the status of a Chainstamp proof. If the stampId or stampHash is unknown, use the /verify/item/{itemHash} endpoint instead.

<h3 id="verify-stamp-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|stampId|path|integer(int64)|true|stampId|
|stampHash|path|string|true|stampHash|

> Example responses

> 200 Response

```json
{
  "blockHash": "string",
  "blockNumber": 0,
  "blockTime": "2018-12-15T17:50:52Z",
  "confirmations": 0,
  "expectedSubmissionTime": 0,
  "paid": true,
  "paymentLevel": "string",
  "seedHash": "string",
  "status": 0,
  "txId": "string",
  "txTime": "2018-12-15T17:50:52Z"
}
```

<h3 id="verify-stamp-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|OK|[VerifyStatus](#schemaverifystatus)|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Unauthorized|None|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|Forbidden|None|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Not Found|None|

<aside class="success">
This operation does not require authentication
</aside>

<h1 id="chainstamp-rest-api-create">Create</h1>

## stamp-basic

<a id="opIdstamp-basic"></a>

> Code samples

```shell
# You can also use wget
curl -X POST https://api.chainstamp.io:8443/stamp/basic \
  -H 'Content-Type: application/json' \
  -H 'Accept: application/json'

```

```http
POST https://api.chainstamp.io:8443/stamp/basic HTTP/1.1
Host: api.chainstamp.io:8443
Content-Type: application/json
Accept: application/json

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'application/json'

};

$.ajax({
  url: 'https://api.chainstamp.io:8443/stamp/basic',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const fetch = require('node-fetch');
const inputBody = '{
  "emailToNotify": "string",
  "originalHashes": [
    "string"
  ]
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'application/json'

};

fetch('https://api.chainstamp.io:8443/stamp/basic',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => 'application/json'
}

result = RestClient.post 'https://api.chainstamp.io:8443/stamp/basic',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': 'application/json'
}

r = requests.post('https://api.chainstamp.io:8443/stamp/basic', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("https://api.chainstamp.io:8443/stamp/basic");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"application/json"},
        
    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "https://api.chainstamp.io:8443/stamp/basic", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /stamp/basic`

*Create a free chainstamp proof.*

Use this operation to create a blockchain timestamp (Chainstamp proof) for any digital documents. This api is free and will be submittd to the bitcoin network within 24hrs. Our paid apis (comming soon) ,and our web interface, allow for faster or immediate submission.<br/><br/>Limits: Free version allows only up to 3 file hashes in 'originalHashes' array.

> Body parameter

```json
{
  "emailToNotify": "string",
  "originalHashes": [
    "string"
  ]
}
```

<h3 id="stamp-basic-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|body|body|[StampBasicRequest](#schemastampbasicrequest)|true|basicRequest|

> Example responses

> 200 Response

```json
{
  "expectedSubmissionTime": 0,
  "originalHashes": [
    "string"
  ],
  "paymentAddress": "string",
  "paymentAmtBtc": 0,
  "paymentId": 0,
  "seedHash": "string",
  "seedId": 0,
  "stampHash": "string",
  "stampId": 0,
  "status": 0,
  "transactionId": "string"
}
```

<h3 id="stamp-basic-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|OK|[OpenResponse](#schemaopenresponse)|
|201|[Created](https://tools.ietf.org/html/rfc7231#section-6.3.2)|Created|None|
|401|[Unauthorized](https://tools.ietf.org/html/rfc7235#section-3.1)|Unauthorized|None|
|403|[Forbidden](https://tools.ietf.org/html/rfc7231#section-6.5.3)|Forbidden|None|
|404|[Not Found](https://tools.ietf.org/html/rfc7231#section-6.5.4)|Not Found|None|

<aside class="success">
This operation does not require authentication
</aside>

# Schemas

<h2 id="tocSopenresponse">OpenResponse</h2>

<a id="schemaopenresponse"></a>

```json
{
  "expectedSubmissionTime": 0,
  "originalHashes": [
    "string"
  ],
  "paymentAddress": "string",
  "paymentAmtBtc": 0,
  "paymentId": 0,
  "seedHash": "string",
  "seedId": 0,
  "stampHash": "string",
  "stampId": 0,
  "status": 0,
  "transactionId": "string"
}

```

*OpenResponse*

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|expectedSubmissionTime|integer(int64)|false|none|none|
|originalHashes|[string]|false|none|none|
|paymentAddress|string|false|none|none|
|paymentAmtBtc|number(double)|false|none|none|
|paymentId|integer(int64)|false|none|none|
|seedHash|string|false|none|none|
|seedId|integer(int64)|false|none|none|
|stampHash|string|false|none|none|
|stampId|integer(int64)|false|none|none|
|status|integer(int32)|false|none|none|
|transactionId|string|false|none|none|

<h2 id="tocSstampbasicrequest">StampBasicRequest</h2>

<a id="schemastampbasicrequest"></a>

```json
{
  "emailToNotify": "string",
  "originalHashes": [
    "string"
  ]
}

```

*StampBasicRequest*

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|emailToNotify|string|false|none|none|
|originalHashes|[string]|false|none|none|

<h2 id="tocSverifyitemstatus">VerifyItemStatus</h2>

<a id="schemaverifyitemstatus"></a>

```json
{
  "blockHash": "string",
  "blockNumber": 0,
  "blockTime": "2018-12-15T17:50:52Z",
  "confirmations": 0,
  "expectedSubmissionTime": 0,
  "seedHash": "string",
  "status": 0,
  "txId": "string",
  "txTime": "2018-12-15T17:50:52Z"
}

```

*VerifyItemStatus*

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|blockHash|string|false|none|none|
|blockNumber|integer(int32)|false|none|none|
|blockTime|string(date-time)|false|none|none|
|confirmations|integer(int32)|false|none|none|
|expectedSubmissionTime|integer(int64)|false|none|none|
|seedHash|string|false|none|none|
|status|integer(int32)|false|none|none|
|txId|string|false|none|none|
|txTime|string(date-time)|false|none|none|

<h2 id="tocSverifystatus">VerifyStatus</h2>

<a id="schemaverifystatus"></a>

```json
{
  "blockHash": "string",
  "blockNumber": 0,
  "blockTime": "2018-12-15T17:50:52Z",
  "confirmations": 0,
  "expectedSubmissionTime": 0,
  "paid": true,
  "paymentLevel": "string",
  "seedHash": "string",
  "status": 0,
  "txId": "string",
  "txTime": "2018-12-15T17:50:52Z"
}

```

*VerifyStatus*

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|blockHash|string|false|none|none|
|blockNumber|integer(int32)|false|none|none|
|blockTime|string(date-time)|false|none|none|
|confirmations|integer(int32)|false|none|none|
|expectedSubmissionTime|integer(int64)|false|none|none|
|paid|boolean|false|none|none|
|paymentLevel|string|false|none|none|
|seedHash|string|false|none|none|
|status|integer(int32)|false|none|none|
|txId|string|false|none|none|
|txTime|string(date-time)|false|none|none|

